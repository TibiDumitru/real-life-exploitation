from check_registry import check_registry_key
from check_service_status import check_service_status
from check_driver_installed import is_driver_installed
from check_driver_state import is_driver_running
from get_all_KB_from_host import get_installed_patches
import json
import subprocess
import requests
import sys

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

GET_KB_REPORT_SCRIPT = "./Get-KB-Report.ps1"

def print_tick(condition):
    if condition == True:
        print(bcolors.FAIL + '✓' + bcolors.ENDC)
    else:  
        print(bcolors.OKGREEN + '✕' + bcolors.ENDC)

def print_registry_check_message(key_name, key_path, expected_value):
    print(
            f"Checking key{bcolors.HEADER} '{key_name}'{bcolors.ENDC}" +
            f"in registry{bcolors.HEADER} '{key_path}' {bcolors.ENDC}" +
            f"is set to{bcolors.HEADER} {expected_value} {bcolors.ENDC}",end=' '
        )

    print_tick(check_registry_key(key_path, key_name, expected_value))

def print_service_check_message(service_name, expected_status):
    print(
            f"Checking service{bcolors.HEADER} '{service_name}'{bcolors.ENDC}" +
            f" is set to{bcolors.HEADER} {expected_status} {bcolors.ENDC}",end=' '
        )

    print_tick(check_service_status(service_name))

def print_driver_installed_check_message(driver_name, expected_status):
    print(
            f"Checking driver installed{bcolors.HEADER} '{driver_name}'{bcolors.ENDC}" +
            f" is set to{bcolors.HEADER} {expected_status} {bcolors.ENDC}",end=' '
        )

    print_tick(is_driver_installed(driver_name))

def print_driver_running_check_message(driver_name, expected_status):
    print(
            f"Checking driver running{bcolors.HEADER} '{driver_name}'{bcolors.ENDC}" +
            f" is set to{bcolors.HEADER} {expected_status} {bcolors.ENDC}",end=' '
        )

    print_tick(is_driver_running(driver_name))

def test_KB_not_installed(reports):
    """ Return False when patch is installed, True when patch is not installed
    """
    for report in reports:
        if isinstance(report['KBArticle'], list):
            for KB in report['KBArticle']:
                KB_ID = KB['ID']
                if KB_ID in patches:
                    return False
        else:
            KB = report['KBArticle']
            if 'ID' in KB:
                if KB['ID'] in patches:
                    return False
    return True

def run(cmd):
    completed = subprocess.run(["powershell", "-Command", cmd], capture_output=True)
    return completed

# Get CVE as script parameter
if len(sys.argv) > 1:
    CVE = sys.argv[1]
    print(f"Checking CVE {CVE}...")
else:
    print("No CVE provided.")

# ---------------------------------------------- RUN check KB----------------------------------------------
print(f"Checking {bcolors.HEADER}Windows security updates {bcolors.ENDC}are not installed", end=' ')

patches = get_installed_patches()

get_kb_report_cmd = f"{GET_KB_REPORT_SCRIPT} {CVE}"
result = subprocess.check_output(["powershell", get_kb_report_cmd])
dict_data = json.loads(result.decode("utf-8"))

print_tick(test_KB_not_installed(dict_data))


# ---------------------------------------------- parse cve_data ----------------------------------------------
# Get CVE prerequisites
cve_data = requests.get(f'http://40.114.210.90:5000/{CVE}').json()

for prerequisite in cve_data['prerequisites']:
    if (prerequisite['type'] == 'registry'):
        key_path = prerequisite['registry']['path']
        key_name = prerequisite['registry']['key']
        expected_value = prerequisite['registry']['value']

        print_registry_check_message(key_name, key_path, expected_value)        
    elif (prerequisite['type'] == 'service'):
        service_name = prerequisite['service']['name']
        expected_status = prerequisite['service']['state']

        print_service_check_message(service_name, expected_status)
    elif (prerequisite['type'] == 'driverInstalled'):
        driver_name = prerequisite['driverInstalled']['name']

        print_driver_installed_check_message(driver_name, expected_status)
    elif (prerequisite['type'] == 'driverRunning'):
        driver_name = prerequisite['driverRunning']['name']

        print_driver_running_check_message(driver_name, expected_status)
